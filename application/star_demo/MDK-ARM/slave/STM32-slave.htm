<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\slave\STM32-slave.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\slave\STM32-slave.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 24]: Last Updated: Sat May 11 02:39:09 2013
<BR><P>
<H3>Maximum Stack Usage =        116 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
EXTI3_IRQHandler &rArr; extIntRX_StateMachine &rArr; EZMacPRO_AckSending &rArr; EZMacPRO_Ack_Write &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from ezmacpro_externalint.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from ezmacpro_timerint.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[9c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[38]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[9f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[a0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>BoardInit</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, bsp.o(i.BoardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BoardInit &rArr; TimerInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGMCU_Config
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinLow
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinHigh
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2BusyWait_ms
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine
</UL>

<P><STRONG><a name="[3d]"></a>DBGMCU_Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dbgmcu.o(i.DBGMCU_Config))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ezmacpro_externalint.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = EXTI3_IRQHandler &rArr; extIntRX_StateMachine &rArr; EZMacPRO_AckSending &rArr; EZMacPRO_Ack_Write &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiReadReg
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntWakeUp
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntTX_StateMachine
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntDisableInterrupts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_LowBattery
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_LFTimerExpired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI_Init</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[51]"></a>EZMacPRO_AckSending</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, star_demo_slave_callbacks.o(i.EZMacPRO_AckSending))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EZMacPRO_AckSending &rArr; EZMacPRO_Ack_Write &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Ack_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
</UL>

<P><STRONG><a name="[9b]"></a>EZMacPRO_AckTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, star_demo_slave_callbacks.o(i.EZMacPRO_AckTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntTX_StateMachine
</UL>

<P><STRONG><a name="[52]"></a>EZMacPRO_Ack_Write</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ezmacpro.o(i.EZMacPRO_Ack_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EZMacPRO_Ack_Write &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_AckSending
</UL>

<P><STRONG><a name="[88]"></a>EZMacPRO_CRCError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, star_demo_slave_callbacks.o(i.EZMacPRO_CRCError))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
</UL>

<P><STRONG><a name="[54]"></a>EZMacPRO_Idle</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, ezmacpro.o(i.EZMacPRO_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EZMacPRO_Idle &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiWriteReg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiReadReg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetFunction1
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetEnable2
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_StateIdleEntered
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeStatusUpdate
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeAssociate
</UL>

<P><STRONG><a name="[59]"></a>EZMacPRO_Init</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, ezmacpro.o(i.EZMacPRO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EZMacPRO_Init &rArr; SetRfParameters &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macTimeout
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiWriteReg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiReadReg
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpecialRegisterSettings
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfParameters
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_StateWakeUpEntered
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_StateSleepEntered
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeBoot
</UL>

<P><STRONG><a name="[9a]"></a>EZMacPRO_LBTTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, star_demo_slave_callbacks.o(i.EZMacPRO_LBTTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntTX_StateMachine
</UL>

<P><STRONG><a name="[4f]"></a>EZMacPRO_LFTimerExpired</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, star_demo_slave_callbacks.o(i.EZMacPRO_LFTimerExpired))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[50]"></a>EZMacPRO_LowBattery</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, star_demo_slave_callbacks.o(i.EZMacPRO_LowBattery))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>EZMacPRO_PacketDiscarded</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, star_demo_slave_callbacks.o(i.EZMacPRO_PacketDiscarded))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
</UL>

<P><STRONG><a name="[87]"></a>EZMacPRO_PacketReceived</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, star_demo_slave_callbacks.o(i.EZMacPRO_PacketReceived))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
</UL>

<P><STRONG><a name="[8b]"></a>EZMacPRO_PacketSent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, star_demo_slave_callbacks.o(i.EZMacPRO_PacketSent))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntTX_StateMachine
</UL>

<P><STRONG><a name="[5f]"></a>EZMacPRO_Receive</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, ezmacpro.o(i.EZMacPRO_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EZMacPRO_Receive &rArr; macSetFunction1 &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macTimeout
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteReg
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadReg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetFunction1
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetEnable2
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_StateRxEntered
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeStatusUpdate
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeAssociate
</UL>

<P><STRONG><a name="[63]"></a>EZMacPRO_Reg_Read</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ezmacpro.o(i.EZMacPRO_Reg_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EZMacPRO_Reg_Read &rArr; macSpiReadReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeStatusUpdate
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeAssociate
</UL>

<P><STRONG><a name="[64]"></a>EZMacPRO_Reg_Write</STRONG> (Thumb, 646 bytes, Stack size 24 bytes, ezmacpro.o(i.EZMacPRO_Reg_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = EZMacPRO_Reg_Write &rArr; SetRfParameters &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiWriteReg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiReadReg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macUpdateLBTI
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macUpdateDynamicTimeouts
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeStatusUpdate
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeSleep
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeBoot
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeAssociate
</UL>

<P><STRONG><a name="[6e]"></a>EZMacPRO_RxBuf_Read</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ezmacpro.o(i.EZMacPRO_RxBuf_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EZMacPRO_RxBuf_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeStatusUpdate
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeAssociate
</UL>

<P><STRONG><a name="[67]"></a>EZMacPRO_Sleep</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ezmacpro.o(i.EZMacPRO_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EZMacPRO_Sleep &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiWriteReg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetFunction1
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetEnable2
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_StateSleepEntered
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeStatusUpdate
</UL>

<P><STRONG><a name="[89]"></a>EZMacPRO_StateErrorEntered</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, star_demo_slave_callbacks.o(i.EZMacPRO_StateErrorEntered))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntWakeUp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntTX_StateMachine
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntRX_StateMachine
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntWakeUp
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
</UL>

<P><STRONG><a name="[58]"></a>EZMacPRO_StateIdleEntered</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, star_demo_slave_callbacks.o(i.EZMacPRO_StateIdleEntered))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntGotoNextStateUsingSECR
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntWakeUp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntGotoNextStateUsingSECR
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Idle
</UL>

<P><STRONG><a name="[62]"></a>EZMacPRO_StateRxEntered</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, star_demo_slave_callbacks.o(i.EZMacPRO_StateRxEntered))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Receive
</UL>

<P><STRONG><a name="[5e]"></a>EZMacPRO_StateSleepEntered</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, star_demo_slave_callbacks.o(i.EZMacPRO_StateSleepEntered))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntGotoNextStateUsingSECR
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntGotoNextStateUsingSECR
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Sleep
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Init
</UL>

<P><STRONG><a name="[69]"></a>EZMacPRO_StateTxEntered</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, star_demo_slave_callbacks.o(i.EZMacPRO_StateTxEntered))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Transmit
</UL>

<P><STRONG><a name="[5a]"></a>EZMacPRO_StateWakeUpEntered</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, star_demo_slave_callbacks.o(i.EZMacPRO_StateWakeUpEntered))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Wake_Up
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Init
</UL>

<P><STRONG><a name="[84]"></a>EZMacPRO_SyncWordReceived</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, star_demo_slave_callbacks.o(i.EZMacPRO_SyncWordReceived))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
</UL>

<P><STRONG><a name="[68]"></a>EZMacPRO_Transmit</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, ezmacpro.o(i.EZMacPRO_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EZMacPRO_Transmit &rArr; macSetFunction1 &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macTimeout
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteReg
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadReg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetFunction1
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetEnable2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_StateTxEntered
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeStatusUpdate
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeAssociate
</UL>

<P><STRONG><a name="[6a]"></a>EZMacPRO_TxBuf_Write</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ezmacpro.o(i.EZMacPRO_TxBuf_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EZMacPRO_TxBuf_Write &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiWriteReg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiWriteFIFO
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeStatusUpdate
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeAssociate
</UL>

<P><STRONG><a name="[6c]"></a>EZMacPRO_Wake_Up</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ezmacpro.o(i.EZMacPRO_Wake_Up))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EZMacPRO_Wake_Up &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macTimeout
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiWriteReg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiReadReg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetFunction1
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetEnable2
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2BusyWait_ms
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_StateWakeUpEntered
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeSleep
</UL>

<P><STRONG><a name="[46]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[8f]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinLow
</UL>

<P><STRONG><a name="[8e]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinHigh
</UL>

<P><STRONG><a name="[49]"></a>NVIC_Init</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[48]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[3e]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[3c]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[45]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[44]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[5c]"></a>SetRfParameters</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, ezmacpro.o(i.SetRfParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SetRfParameters &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Reg_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Init
</UL>

<P><STRONG><a name="[6d]"></a>SlaveNodeAssociate</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, star_demo_slave_node.o(i.SlaveNodeAssociate))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SlaveNodeAssociate &rArr; EZMacPRO_Reg_Write &rArr; SetRfParameters &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinHigh
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2BusyWait_ms
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_TxBuf_Write
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Transmit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_RxBuf_Read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Reg_Write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Reg_Read
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Receive
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Idle
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine
</UL>

<P><STRONG><a name="[6f]"></a>SlaveNodeBoot</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, star_demo_slave_node.o(i.SlaveNodeBoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SlaveNodeBoot &rArr; EZMacPRO_Init &rArr; SetRfParameters &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Reg_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine
</UL>

<P><STRONG><a name="[70]"></a>SlaveNodeSleep</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, star_demo_slave_node.o(i.SlaveNodeSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SlaveNodeSleep &rArr; EZMacPRO_Reg_Write &rArr; SetRfParameters &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinHigh
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Wake_Up
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Reg_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine
</UL>

<P><STRONG><a name="[71]"></a>SlaveNodeStatusUpdate</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, star_demo_slave_node.o(i.SlaveNodeStatusUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SlaveNodeStatusUpdate &rArr; EZMacPRO_Reg_Write &rArr; SetRfParameters &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinLow
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2BusyWait_ms
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_TxBuf_Write
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Transmit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Sleep
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_RxBuf_Read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Reg_Write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Reg_Read
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Receive
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Idle
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine
</UL>

<P><STRONG><a name="[72]"></a>StateMachine</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, star_demo_slave_node.o(i.StateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = StateMachine &rArr; SlaveNodeAssociate &rArr; EZMacPRO_Reg_Write &rArr; SetRfParameters &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeStatusUpdate
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeSleep
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeBoot
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeAssociate
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>StateMachine_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, star_demo_slave_node.o(i.StateMachine_Init))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, ezmacpro_timerint.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIM3_IRQHandler &rArr; timerIntTX_StateMachine &rArr; timerIntGotoNextStateUsingSECR &rArr; timerIntNextRX_Channel &rArr; timerIntSetFunction1
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntWakeUp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntTX_StateMachine
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntRX_StateMachine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>

<P><STRONG><a name="[77]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>

<P><STRONG><a name="[7a]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SelectOnePulseMode))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>

<P><STRONG><a name="[78]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>

<P><STRONG><a name="[43]"></a>Timer2BusyWait_ms</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bsp.o(i.Timer2BusyWait_ms))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Wake_Up
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeStatusUpdate
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeAssociate
</UL>

<P><STRONG><a name="[41]"></a>TimerInit</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, bsp.o(i.TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TimerInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOnePulseMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[a3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[a4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[7b]"></a>extIntBadAddrError</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ezmacpro_externalint.o(i.extIntBadAddrError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = extIntBadAddrError &rArr; extIntSpiReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntHeaderError
</UL>

<P><STRONG><a name="[4e]"></a>extIntDisableInterrupts</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ezmacpro_externalint.o(i.extIntDisableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = extIntDisableInterrupts &rArr; extIntSpiWriteReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiWriteReg
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSetEnable2
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntWakeUp
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntGotoNextStateUsingSECR
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>extIntGotoNextStateUsingSECR</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ezmacpro_externalint.o(i.extIntGotoNextStateUsingSECR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = extIntGotoNextStateUsingSECR &rArr; extIntNextRX_Channel &rArr; extIntSpiWriteReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntTimeout
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiWriteReg
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiReadReg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSetFunction1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSetEnable2
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntNextRX_Channel
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntDisableInterrupts
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_StateSleepEntered
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_StateIdleEntered
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntTX_StateMachine
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
</UL>

<P><STRONG><a name="[82]"></a>extIntHeaderError</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ezmacpro_externalint.o(i.extIntHeaderError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = extIntHeaderError &rArr; extIntBadAddrError &rArr; extIntSpiReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiReadReg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntIncrementError
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntBadAddrError
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
</UL>

<P><STRONG><a name="[83]"></a>extIntIncrementError</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ezmacpro_externalint.o(i.extIntIncrementError))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntTX_StateMachine
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntHeaderError
</UL>

<P><STRONG><a name="[80]"></a>extIntNextRX_Channel</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ezmacpro_externalint.o(i.extIntNextRX_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = extIntNextRX_Channel &rArr; extIntSpiWriteReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntGotoNextStateUsingSECR
</UL>

<P><STRONG><a name="[4d]"></a>extIntRX_StateMachine</STRONG> (Thumb, 1182 bytes, Stack size 40 bytes, ezmacpro_externalint.o(i.extIntRX_StateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = extIntRX_StateMachine &rArr; EZMacPRO_AckSending &rArr; EZMacPRO_Ack_Write &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntTimeout
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiWriteReg
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiReadReg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiReadFIFO
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSetFunction1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSetEnable2
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntNextRX_Channel
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntIncrementError
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntHeaderError
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntGotoNextStateUsingSECR
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntDisableInterrupts
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_SyncWordReceived
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_StateErrorEntered
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_PacketReceived
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_PacketDiscarded
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_CRCError
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_AckSending
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>extIntSetEnable2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ezmacpro_externalint.o(i.extIntSetEnable2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = extIntSetEnable2 &rArr; extIntSpiWriteReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntWakeUp
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntTX_StateMachine
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntGotoNextStateUsingSECR
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntDisableInterrupts
</UL>

<P><STRONG><a name="[7f]"></a>extIntSetFunction1</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ezmacpro_externalint.o(i.extIntSetFunction1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = extIntSetFunction1 &rArr; extIntSpiWriteReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntWakeUp
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntTX_StateMachine
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntGotoNextStateUsingSECR
</UL>

<P><STRONG><a name="[85]"></a>extIntSpiReadFIFO</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, bsp.o(i.extIntSpiReadFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = extIntSpiReadFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntTX_StateMachine
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
</UL>

<P><STRONG><a name="[61]"></a>SpiReadReg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bsp.o(i.extIntSpiReadReg))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Transmit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Receive
</UL>

<P><STRONG><a name="[4a]"></a>extIntSpiReadReg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(i.extIntSpiReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = extIntSpiReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntTX_StateMachine
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntHeaderError
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntGotoNextStateUsingSECR
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntBadAddrError
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>timerIntSpiReadReg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bsp.o(i.extIntSpiReadReg))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntTX_StateMachine
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntRX_StateMachine
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntGotoNextStateUsingSECR
</UL>

<P><STRONG><a name="[60]"></a>SpiWriteReg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bsp.o(i.extIntSpiWriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Transmit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Receive
</UL>

<P><STRONG><a name="[7c]"></a>extIntSpiWriteReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp.o(i.extIntSpiWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = extIntSpiWriteReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntWakeUp
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntTX_StateMachine
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSetFunction1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSetEnable2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntNextRX_Channel
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntGotoNextStateUsingSECR
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntDisableInterrupts
</UL>

<P><STRONG><a name="[91]"></a>timerIntSpiWriteReg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bsp.o(i.extIntSpiWriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntTX_StateMachine
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSetFunction1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSetEnable2
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntRX_StateMachine
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntNextRX_Channel
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntGotoNextStateUsingSECR
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntDisableInterrupts
</UL>

<P><STRONG><a name="[4b]"></a>extIntTX_StateMachine</STRONG> (Thumb, 540 bytes, Stack size 32 bytes, ezmacpro_externalint.o(i.extIntTX_StateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = extIntTX_StateMachine &rArr; extIntGotoNextStateUsingSECR &rArr; extIntNextRX_Channel &rArr; extIntSpiWriteReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntTimeout
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiWriteReg
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiReadReg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiReadFIFO
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSetFunction1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSetEnable2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntIncrementError
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntGotoNextStateUsingSECR
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_PacketSent
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>extIntTimeout</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, bsp.o(i.extIntTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = extIntTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntWakeUp
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntTX_StateMachine
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntRX_StateMachine
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntGotoNextStateUsingSECR
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macTimeout
</UL>

<P><STRONG><a name="[97]"></a>timerIntTimeout</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, bsp.o(i.extIntTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timerIntTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntTX_StateMachine
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntRX_StateMachine
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntGotoNextStateUsingSECR
</UL>

<P><STRONG><a name="[4c]"></a>extIntWakeUp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ezmacpro_externalint.o(i.extIntWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = extIntWakeUp &rArr; extIntSetFunction1 &rArr; extIntSpiWriteReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntTimeout
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiWriteReg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSetFunction1
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSetEnable2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntDisableInterrupts
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_StateIdleEntered
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_StateErrorEntered
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>macSetEnable2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ezmacpro.o(i.macSetEnable2))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = macSetEnable2 &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Wake_Up
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Transmit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Sleep
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Receive
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Idle
</UL>

<P><STRONG><a name="[57]"></a>macSetFunction1</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ezmacpro.o(i.macSetFunction1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = macSetFunction1 &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Wake_Up
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Transmit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Sleep
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Receive
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Idle
</UL>

<P><STRONG><a name="[5d]"></a>macSpecialRegisterSettings</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ezmacpro.o(i.macSpecialRegisterSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = macSpecialRegisterSettings &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Init
</UL>

<P><STRONG><a name="[56]"></a>macSpiReadReg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(i.macSpiReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = macSpiReadReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiWriteReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Wake_Up
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_TxBuf_Write
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Reg_Write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Reg_Read
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Idle
</UL>

<P><STRONG><a name="[6b]"></a>macSpiWriteFIFO</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, bsp.o(i.macSpiWriteFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = macSpiWriteFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_TxBuf_Write
</UL>

<P><STRONG><a name="[8c]"></a>macSpiWriteReadReg</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, bsp.o(i.macSpiWriteReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiWriteReg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiReadReg
</UL>

<P><STRONG><a name="[53]"></a>macSpiWriteReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp.o(i.macSpiWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiWriteReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpecialRegisterSettings
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetFunction1
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetEnable2
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfParameters
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Wake_Up
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_TxBuf_Write
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Sleep
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Reg_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Idle
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Ack_Write
</UL>

<P><STRONG><a name="[5b]"></a>macTimeout</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, bsp.o(i.macTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = macTimeout &rArr; extIntTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Wake_Up
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Transmit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Receive
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Init
</UL>

<P><STRONG><a name="[65]"></a>macUpdateDynamicTimeouts</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ezmacpro.o(i.macUpdateDynamicTimeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = macUpdateDynamicTimeouts
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Reg_Write
</UL>

<P><STRONG><a name="[66]"></a>macUpdateLBTI</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ezmacpro.o(i.macUpdateLBTI))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_Reg_Write
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = main &rArr; StateMachine &rArr; SlaveNodeAssociate &rArr; EZMacPRO_Reg_Write &rArr; SetRfParameters &rArr; macSpiWriteReg &rArr; macSpiWriteReadReg &rArr; spiWriteReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[42]"></a>pinHigh</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp.o(i.pinHigh))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeSleep
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeAssociate
</UL>

<P><STRONG><a name="[3f]"></a>pinLow</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp.o(i.pinLow))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveNodeStatusUpdate
</UL>

<P><STRONG><a name="[40]"></a>pinMode</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, bsp.o(i.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[8a]"></a>spiWriteReadReg</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp.o(i.spiWriteReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spiWriteReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSpiWriteReadReg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiWriteReg
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extIntSpiReadReg
</UL>

<P><STRONG><a name="[90]"></a>timerIntDisableInterrupts</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ezmacpro_timerint.o(i.timerIntDisableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timerIntDisableInterrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSpiWriteReg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSetEnable2
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntGotoNextStateUsingSECR
</UL>

<P><STRONG><a name="[93]"></a>timerIntGotoNextStateUsingSECR</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ezmacpro_timerint.o(i.timerIntGotoNextStateUsingSECR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timerIntGotoNextStateUsingSECR &rArr; timerIntNextRX_Channel &rArr; timerIntSetFunction1
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntTimeout
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSpiWriteReg
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSpiReadReg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSetFunction1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSetEnable2
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntNextRX_Channel
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntDisableInterrupts
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_StateSleepEntered
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_StateIdleEntered
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntTX_StateMachine
</UL>

<P><STRONG><a name="[99]"></a>timerIntIncrementError</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ezmacpro_timerint.o(i.timerIntIncrementError))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntTX_StateMachine
</UL>

<P><STRONG><a name="[96]"></a>timerIntNextRX_Channel</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ezmacpro_timerint.o(i.timerIntNextRX_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timerIntNextRX_Channel &rArr; timerIntSetFunction1
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSpiWriteReg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSetFunction1
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntRX_StateMachine
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntGotoNextStateUsingSECR
</UL>

<P><STRONG><a name="[76]"></a>timerIntRX_StateMachine</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, ezmacpro_timerint.o(i.timerIntRX_StateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timerIntRX_StateMachine &rArr; timerIntNextRX_Channel &rArr; timerIntSetFunction1
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntTimeout
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSpiWriteReg
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSpiReadReg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSetFunction1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSetEnable2
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntNextRX_Channel
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_StateErrorEntered
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>timerIntRandom</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ezmacpro_timerint.o(i.timerIntRandom))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntTX_StateMachine
</UL>

<P><STRONG><a name="[92]"></a>timerIntSetEnable2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ezmacpro_timerint.o(i.timerIntSetEnable2))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSpiWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntTX_StateMachine
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntRX_StateMachine
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntGotoNextStateUsingSECR
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntDisableInterrupts
</UL>

<P><STRONG><a name="[94]"></a>timerIntSetFunction1</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ezmacpro_timerint.o(i.timerIntSetFunction1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timerIntSetFunction1
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSpiWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntTX_StateMachine
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntRX_StateMachine
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntNextRX_Channel
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntGotoNextStateUsingSECR
</UL>

<P><STRONG><a name="[74]"></a>timerIntTX_StateMachine</STRONG> (Thumb, 724 bytes, Stack size 40 bytes, ezmacpro_timerint.o(i.timerIntTX_StateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = timerIntTX_StateMachine &rArr; timerIntGotoNextStateUsingSECR &rArr; timerIntNextRX_Channel &rArr; timerIntSetFunction1
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntTimeout
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSpiWriteReg
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSpiReadReg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSetFunction1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntSetEnable2
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntRandom
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntIncrementError
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIntGotoNextStateUsingSECR
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_StateErrorEntered
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_LBTTimeout
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_AckTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>timerIntWakeUp</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ezmacpro_timerint.o(i.timerIntWakeUp))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EZMacPRO_StateErrorEntered
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[73]"></a>SetSysClock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
